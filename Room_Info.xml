<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, April 01, 2022, 10:07 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Room_Info" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Room_Info"
   author="Gaballon"
   id="4c6b59d1d6f3a713917abaa1"
   language="Lua"
   purpose="Show additional info after the Aardwolf room name."
   save_state="y"
   date_written="2022-04-01 22:06:38"
   requires="5.07"
   version="1.0"
   >

</plugin>

<triggers>

  <trigger
   enabled="y"
   keep_evaluating="y"
   match="{rname}*"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>
	TSRtable = TriggerStyleRuns
  </send>
  </trigger>
  
</triggers>

<aliases>

<alias
   match="dbquery *"
   enabled="y"
   sequence="100"
   script="dbquery_alias"
   regexp="n"
></alias>

</aliases>

<script>
<![CDATA[

dofile (GetInfo(60) .. "aardwolf_colors.lua")
require "tprint"
require "gmcphelper"
require "serialize"
require "wait"

function update_room_table()
	print("Building room_table from Mapper database...")
	local count = dbquery()
	print("Room_table updated with", count, "results from the database.")
end

function dbquery()
	db = assert (sqlite3.open(GetInfo (66) .. sanitize_filename(WorldName()) .. ".db"))
	local stmt = db:prepare("SELECT uid, name, noportal, norecall from rooms WHERE rooms.noportal=1 OR rooms.norecall=1 ORDER BY uid")
	local count = 0
	-- loop until we get everything
	while true do
		local result = stmt:step()
		-- exit loop if done
		if result == sqlite3.DONE then
			--print(string.rep("-", 20))
			--print("Query completed with", count, "results.")
			break
		end -- if done
		-- should have ROW result
		assert(result == sqlite3.ROW, "Row not found.")
		-- get all values into a table
		local row = stmt:get_named_values()
		-- store them
		--print(string.rep("-", 20))
		count = count + 1
		local key = tostring(row["uid"])
		room_table[key] = {}
		room_table[key]["name"] = row["name"]
		room_table[key]["noportal"] = row["noportal"]
		room_table[key]["norecall"] = row["norecall"]
	end -- while

	-- done with this statement
	stmt:finalize()

	-- finished with database
	db:close()
	--print("DB open:", db:isopen())
	return count
end

function dbquery_alias(aliasname, aliasline, wildcards)
	db = assert (sqlite3.open(GetInfo (66) .. sanitize_filename(WorldName()) .. ".db"))
	print(db:isopen())
	print("Query submitted:", table.concat(wildcards, " "))
	local stmt = db:prepare(table.concat(wildcards, " "))
	local count = 0
	-- loop until we get everything
	while true do
		local result = stmt:step()
		-- exit loop if done
		if result == sqlite3.DONE then
			print(string.rep("-", 20))
			print("Query completed with", count, "results.")
			break
		end -- if done
		-- should have ROW result
		assert(result == sqlite3.ROW, "Row not found.")
		-- get all values into a table
		local row = stmt:get_named_values()
		-- display them
		print(string.rep("-", 20))
		count = count + 1
		tprint(row)
	end -- while

	-- done with this statement
	stmt:finalize()

	-- finished with database
	db:close()
	print("DB open:", db:isopen())
end

function sanitize_filename(str)
   str = string.gsub(str, "[^%w%s()_-]", "")
   return Trim(str)
end

function format_rname (room_id)
	output = stylesToANSI(TSRtable)
	--print(output)
	local room = tostring(room_id)
	rid_display = ColoursToANSI(" @W" .. room .. "@w")
	formatted_output = output .. rid_display
	if room_table[room] ~= nil then
		if tonumber(room_table[room]["noportal"]) == 1 then
			formatted_output = formatted_output .. nop_display
		end
		if tonumber(room_table[room]["norecall"]) == 1 then
			formatted_output = formatted_output .. nor_display
		end
	end
	AnsiNote(string.sub(formatted_output, 15))
end

function OnPluginBroadcast(msg, id, name, text)
	if (id == "3e7dedbe37e44942dd46d264") then
		if (text == "room.info") then
			rid = gmcp("room.info.num")
			--print("Calling format_rname with rid =", rid)
			format_rname(rid)
		end
	end
end	

function OnPluginInstall()
	OnPluginEnable()
end

function OnPluginEnable()
	print("Room_Info plugin enabled.")
	TSRtable = {}
	room_table = {}
	room_id = ""
	nop_display = ColoursToANSI(" @YNo_portal@w")
	nor_display = ColoursToANSI(" @RNo_recall@w")
	DoAfterSpecial(2, "update_room_table()", sendto.script)
end

function OnPluginSaveState()

end

function OnPluginDisable()
	if db:isopen() then
      db:close()
   end
end

function OnPluginClose()
	OnPluginDisable()
end

function OnPluginDisconnect()
	OnPluginDisable()
end

]]>
</script>

</muclient>
